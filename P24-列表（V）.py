"""
列表的引用和拷贝
引用：借用，如果其中一个发生变化，另一个也会变化。赋值其实也是引用，并不是把某个数值放到某个变量盒子里
拷贝：分为浅拷贝和深拷贝
    浅拷贝：处理一位列表完全没问题，但是二维列表就出现独立的问题
    深拷贝：
"""

# 引用
x = [1, 2, 3]
y = x
x[2] = 1
print(y)   # [1, 2, 1]    这就是引用，修改了x，y也会同样变化

# 浅拷贝，之前学过，就是 x.copy()， 或者切片[:]
x = [1, 2, 3]
y = x.copy()
print(y)     # [1, 2, 3]
x[1] = 1     # x = [1, 1, 3]
print(y)     # y = [1, 2, 3]

x = [1, 2, 3]
y = x[:]
print(y)
x[1] = 1
print(y)     # [1, 2, 3]

# 浅拷贝能拷贝嵌套列表，但和引用类似，不能独立出来
x = [[1,2,3], [4,5,6], [7,8,9]]
y = x.copy()
print(y)          # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
x[1][1] = 0
print(x)          # [[1, 2, 3], [4, 0, 6], [7, 8, 9]]
print(y)          # [[1, 2, 3], [4, 0, 6], [7, 8, 9]]
# 说明浅拷贝，只能拷贝外层的对象，对于内层的对象只是引用

### 深拷贝：外层拷贝，内层也拷贝，但需要引进一个copy模块，有两个函数

# copy.copy(x)为浅拷贝
import copy
x = [[1,2,3], [4,5,6], [7,8,9]]
y = copy.copy(x)     # 进行浅拷贝
x[1][1] = 0
print(x)       # [[1, 2, 3], [4, 0, 6], [7, 8, 9]]
print(y)       # [[1, 2, 3], [4, 0, 6], [7, 8, 9]]     效果与y = x.copy()一样

# copy.deepcopy(x)为深拷贝
import copy
x = [[1,2,3], [4,5,6], [7,8,9]]
y = copy.deepcopy(x)
x[1][1] = 0
print(x)       # [[1, 2, 3], [4, 0, 6], [7, 8, 9]]   x变化了
print(y)       # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]   y没变
